# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Temperatue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: float=None, units: str='celsius', timestamp: datetime=None):  # noqa: E501
        """Temperatue - a model defined in Swagger

        :param value: The value of this Temperatue.  # noqa: E501
        :type value: float
        :param units: The units of this Temperatue.  # noqa: E501
        :type units: str
        :param timestamp: The timestamp of this Temperatue.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'value': float,
            'units': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'value': 'value',
            'units': 'units',
            'timestamp': 'timestamp'
        }
        self._value = value
        self._units = units
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Temperatue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Temperatue of this Temperatue.  # noqa: E501
        :rtype: Temperatue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> float:
        """Gets the value of this Temperatue.

        the temperature  # noqa: E501

        :return: The value of this Temperatue.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Temperatue.

        the temperature  # noqa: E501

        :param value: The value of this Temperatue.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def units(self) -> str:
        """Gets the units of this Temperatue.

        the temperature units  # noqa: E501

        :return: The units of this Temperatue.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this Temperatue.

        the temperature units  # noqa: E501

        :param units: The units of this Temperatue.
        :type units: str
        """
        allowed_values = ["celsius", "fahrenheit"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"
                .format(units, allowed_values)
            )

        self._units = units

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Temperatue.

        the timestamp when the temperature was measured  # noqa: E501

        :return: The timestamp of this Temperatue.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Temperatue.

        the timestamp when the temperature was measured  # noqa: E501

        :param timestamp: The timestamp of this Temperatue.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp
