# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Temperature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: date=None, value: float=None):  # noqa: E501
        """Temperature - a model defined in Swagger

        :param _date: The _date of this Temperature.  # noqa: E501
        :type _date: date
        :param value: The value of this Temperature.  # noqa: E501
        :type value: float
        """
        self.swagger_types = {
            '_date': date,
            'value': float
        }

        self.attribute_map = {
            '_date': 'date',
            'value': 'value'
        }
        self.__date = _date
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Temperature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Temperature of this Temperature.  # noqa: E501
        :rtype: Temperature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> date:
        """Gets the _date of this Temperature.


        :return: The _date of this Temperature.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Temperature.


        :param _date: The _date of this Temperature.
        :type _date: date
        """

        self.__date = _date

    @property
    def value(self) -> float:
        """Gets the value of this Temperature.


        :return: The value of this Temperature.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Temperature.


        :param value: The value of this Temperature.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
